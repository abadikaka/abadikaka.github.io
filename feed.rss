<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>üßîüèª Michael Abadi S. | üçé iOS Engineer | üè† Bangkok, üáπüá≠ Thailand | üá≤üá® Indonesian</title><description>Welcome to the official web of Michael</description><link>https://michaelabadi.com</link><language>en</language><lastBuildDate>Mon, 21 Sep 2020 21:38:54 +0700</lastBuildDate><pubDate>Mon, 21 Sep 2020 21:38:54 +0700</pubDate><ttl>250</ttl><atom:link href="https://michaelabadi.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://michaelabadi.com/articles/Escalated-Pyramid-Testing</guid><title>Escalated Testing Pyramid</title><description>Escalated Testing Pyramid.</description><link>https://michaelabadi.com/articles/Escalated-Pyramid-Testing</link><pubDate>Mon, 21 Sep 2020 21:00:00 +0700</pubDate><content:encoded><![CDATA[<h1>Escalated Testing Pyramid</h1><h3>Medium : <a href="https://medium.com/@michaelabadi/escalated-testing-pyramid-5c05ed249155">Escalated Testing Pyramid</a></h3><p>As a normal software engineer, we always remember the rule of thumb of testing. We always heard the word of the testing pyramid which consists of 3 things :</p><ol><li><strong>Unit Testing</strong> <br /><br /></li></ol><ol start="2"><li><strong>Integration Testing</strong> <br /><br /></li></ol><ol start="3"><li><strong>UI Testing</strong><br /><br /></li></ol><img src="https://michaelabadi.com/items/article/pyramid.png" alt="Normal pyramid test"/><br /><br /><br /><br /><p><strong>Unit Testing</strong> is the foundation of your test suite that will be made up of unit tests. Your unit tests make sure that a certain unit (your subject under test or SUT) of your codebase works as intended. Unit tests have the narrowest scope of all the tests in your test suite. The number of unit tests in your test suite will largely outnumber any other type of test. Normally we test every single function of each class to be able to cover 100% test coverage which is impossible. Below is an example of UT in Swift</p><pre><code><span class="keyword">func</span> testMultiplication() {
   <span class="keyword">let</span> a = <span class="number">4</span>
   <span class="keyword">let</span> b = <span class="number">2</span>
   <span class="call">XCTAssert</span>(a * b, <span class="number">8</span>) 
}
</code></pre><p><strong>Integration Testing</strong> is another testing term for testing the integration or communication between each other component of the application such as database, networking, or another layer of an object that needs to integrate with each other. Here are a good explanation and example of Integration testing in swift by <a href=" https://www.swiftbysundell.com/articles/integration-tests-in-swift/">John Sundel</a>.</p><p><strong>UI Testing</strong> is the last layer which is the layer that facing the end-user directly, in this case, we normally call it as an end to end test. The most non-efficient way yet the most accurate is manual testing for UI Testing since it involves an interaction of human behavior which sometimes leads to the BDD testing concept. We will put our accessibility identifier for each UI Element to be able to detect the target component in automation.</p><p>Most of the time all of the basic three testings above are not enough, sometime the application is growing bigger and needs a more maintainable testing approach as well a more concise testing structure. Finally, most of the company try to embrace more testing and find more ways to make testing more precise. Escalation of Testing Pyramid consists of more structure. We can breakdown more into several structures. This is one of the enhanced testing pyramids that I found out. (Order start from the lowest point)</p><img src="https://michaelabadi.com/items/article/triangletest.png" alt="Enhanced testing"/><ol><li><strong>Unit Testing</strong> <br /><br /></li></ol><ol start="2"><li><strong>Snapshot Testing</strong> ‚Üí Acceptance Test <br /><br /></li></ol><ol start="3"><li><strong>Integration Testing</strong><br /><br /></li></ol><ol start="4"><li><strong>UI Local Testing</strong> ‚Üí System Test<br /><br /></li></ol><ol start="5"><li><strong>UI Mock Server Testing</strong> ‚Üí System Test<br /><br /></li></ol><ol start="6"><li><strong>E2E Testing</strong> ‚Üí Production environment<br /><br /></li></ol><p>What was the difference between the former pyramid? So this one we can see some enhancement such as <strong>Snapshot Testing</strong> and <strong>UI Testing</strong>. Besides that, some companies also put more additional tests like <strong>Contract testing and API Testing</strong> as well.</p><p><strong>Snapshot Testing</strong>: Snapshot testing is a testing method that takes the precedent state of the view and compares it with the latest state of the view, if there are some changes, it will tell us if the test is broken because of the snapshot mismatch. Normally this kind of test also considers an acceptance test. The way it works, the system will store the latest state of the view to the memory then later on when someone runs the test, it will compare the newest value with the stored value. It compare either the view hierarchy or the state of the logic within the view itself. Snapshot testing useful to remind the developer if we need to double-check on a specific page if it may break some old logic or cause some issues on it. If there is no issue and all parties accept it, we need to update the test with the newest state of that view. We can use the famous FBSnapshotTesting for snapshot tests in mobile development.</p><pre><code><span class="keyword">import</span> FBSnapshotTestCase 
<span class="keyword">class</span> FBSnapshotTestCaseSwiftTest: <span class="type">FBSnapshotTestCase</span> {  
    <span class="keyword">override func</span> setUp() {    
       <span class="keyword">super</span>.<span class="call">setUp</span>()    
       recordMode = <span class="keyword">false</span>  
    }   
    <span class="keyword">func</span> testExample() {    
       <span class="keyword">let</span> view = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">64</span>, height: <span class="number">64</span>))    
       view.<span class="property">backgroundColor</span> = <span class="type">UIColor</span>.<span class="property">blue</span>
       <span class="type">FBSnapshotVerifyView</span>(view)     
       <span class="type">FBSnapshotVerifyLayer</span>(view.<span class="property">layer</span>)
     }
}
</code></pre><p><strong>UI Local Testing and UI Mock Server Testing</strong>: This testing is also driven by the concept of BDD. Somehow we need to test UI behavior that may work with the domain model or the business logic. We may mock the object which is very useful rather than uses the real object for that test. It is called as <strong>TestDouble</strong> method which taking the Mock object to test the behavior of the flow instead of comparing the state of the real object at the end of the state (Old classic test look for the end state of the class, meanwhile mock test looking for the correct behavior flow of specific test with ignoring the end state within the state, as long as the behavior working perfectly). We can divide this state by using local object testing in our machine before we are using real mock objects from the server that can configurable by the QA. We may need a Docker setup and start our own server for mocking the response from the server and also mocking our domain model object into the test.</p><p><strong>E2E Testing</strong>: This is the last testing which is UI Testing. This one is using production data and environment and normally will be tested with manual QA for better precision.</p><h3>Reference<br /></h3><ol><li><a href="https://martinfowler.com/articles/practical-test-pyramid.html">Practical Test</a></li><li><a href=" https://martinfowler.com/bliki/TestDouble.html">Test Double</a></li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://michaelabadi.com/articles/Wrapper-Pattern-Swift-In-5-Minutes</guid><title>Wrapper Pattern Swift in 5 minutes</title><description>Understanding one of Wrapper Pattern (Adapter) in Real world use case.</description><link>https://michaelabadi.com/articles/Wrapper-Pattern-Swift-In-5-Minutes</link><pubDate>Fri, 11 Sep 2020 21:00:00 +0700</pubDate><content:encoded><![CDATA[<h1>Wrapper Pattern Swift in 5 minutes</h1><h3>Medium : <a href="https://medium.com/macoclock/wrapper-pattern-swift-in-5-minutes-d79f5b5793df">Wrapper pattern swift in 5 minutes</a></h3><p>Have you ever heard about the problem that you need to separate two modules working independently without knowing each other implementation, but requires to be able to communicate easily by only sending necessary data? Most of the advanced use cases will face this real-world use case and we require a more advanced design pattern to be able to solve this pattern to give more scalability to the project.</p><p>There is a general concept about ‚ÄúWrapping‚Äù an object through an intermediary class that can adapt to each other. A lot of structural design pattern that handles this problem. There are five most common design patterns that able to solve this problem, state as below:</p><ol><li><strong>Proxy</strong> could be used when you want to lazy-instantiate an object or hide the fact that you‚Äôre calling a remote service or control access to the object<br /><br /></li></ol><ol start="2"><li><strong>Decorator</strong> is also called ‚ÄúSmart Proxy.‚Äù This is used when you want to add functionality to an object, but not by extending that object‚Äôs type. This allows you to do so at runtime<br /><br /></li></ol><ol start="3"><li><strong>Adapter</strong> is used when you have an abstract interface, and you want to map that interface to another object which has a similar functional role, but a different interface<br /><br /></li></ol><ol start="4"><li><strong>Bridge</strong> is very similar to Adapter, but we call it Bridge when you define both the abstract interface and the underlying implementation. I.e. you‚Äôre not adapting to some legacy or third-party code, you‚Äôre the designer of all the code but you need to be able to swap out different implementations.<br /><br /></li></ol><ol start="5"><li><strong>Facade</strong> is a higher-level (read: simpler) interface to a subsystem of one or more classes. Suppose you have a complex concept that requires multiple objects to represent. Making changes to that set of objects is confusing because you don‚Äôt always know which object has the method you need to call. That‚Äôs the time to write a Facade that provides high-level methods for all the complex operations you can do to the collection of objects<br /><br /></li></ol><p>We can either choose one of the above general pattern to solve our case, and all of them basically is a wrapper pattern, however depending on the use case, this time I will cover about Adapter pattern (which widely used by many developers) to solve compatibility to communicate with 2 or more services on a different layer.</p><h2><strong>REAL-WORLD USE CASE</strong></h2><p>Once upon a time, I have a requirement to satisfy our client by making a framework to hide our internal solution toward our Messaging service through a beautiful interface, therefore I created an UIKit SDK. Next, they would like to integrate our UIKit, however not every of our functionality, some of them, which is we called as a component, would like to reuse it and can comply with their own UI and data source without interfering our business logic. So how do we need to solve this case? We will create a solution that we can provide them a way that they can integrate their own data sources of both UI and model with our framework as well hid the complexity behind. In this article, I would like to limit it only to our messaging list UI. See the below picture to help you understand more of the solution with the adapter.</p><img src="https://michaelabadi.com/items/article/wrapper.png" alt="Structure of our solution"/><h2><strong>CODE</strong></h2><p>Okay, let start to code. First, let limit what are the things that the client is able to inject and communicate to us. We want to limit them only able to set the number of messages, the UI configuration settings such as background color and text color of the list, and the row cell UI for each message in the list.</p><pre><code><span class="keyword">import</span> Foundation
<span class="keyword">import</span> UIKit
<span class="comment">// 1.</span>
<span class="keyword">public struct</span> MessageUIConfig {
   <span class="keyword">let</span> backgroundColor: <span class="type">UIColor</span>
   <span class="keyword">let</span> textColor: <span class="type">UIColor</span>
}
<span class="comment">// 2.</span>
<span class="keyword">public struct</span> MessageModel {
   <span class="keyword">let</span> id: <span class="type">String</span>
   <span class="keyword">let</span> text: <span class="type">String</span>
}
<span class="comment">// 3.</span>
<span class="keyword">public protocol</span> MessageCellable <span class="keyword">where</span> <span class="type">Self</span>: <span class="type">UITableViewCell</span> {
   <span class="keyword">var</span> cellReuseIdentifier: <span class="type">String</span> { <span class="keyword">get</span> }
   <span class="keyword">var</span> nib: <span class="type">UINib</span> { <span class="keyword">get</span> }
}
<span class="comment">// 4.</span>
<span class="keyword">public protocol</span> MessageDatasource {
   <span class="keyword">func</span> numberOfMessages() -&gt; <span class="type">Int</span>
   <span class="keyword">func</span> messagesForIndex(<span class="keyword">_</span> index: <span class="type">Int</span>) -&gt; <span class="type">MessageModel</span>
}
<span class="comment">// 5.</span>
<span class="keyword">public protocol</span> MessageAdapterDelegate {
   <span class="keyword">func</span> messageDidClick(<span class="keyword">_</span> cell: <span class="type">UITableViewCell</span>, message: <span class="type">MessageModel</span>)
   <span class="keyword">func</span> messageWillDisplay(<span class="keyword">_</span> cell: <span class="type">UITableViewCell</span>, message: <span class="type">MessageModel</span>)
}
<span class="comment">// 6.</span>
<span class="keyword">public class</span> MessageAdapter {
   <span class="keyword">weak var</span> delegate: <span class="type">MessageAdapterDelegate</span>?
   <span class="keyword">private(set) var</span> config: <span class="type">MessageUIConfig</span>!
   <span class="keyword">private(set) var</span> datasource: <span class="type">MessageDatasource</span>!
   <span class="keyword">init</span>(config: <span class="type">MessageUIConfig</span>, datasource: <span class="type">MessageDatasource</span>) {
    <span class="keyword">self</span>.<span class="property">config</span> = config
    <span class="keyword">self</span>.<span class="property">datasource</span> = datasource
  }
}
</code></pre><ol><li><strong>MessageUIConfig</strong> : This struct represents the configuration of the UI that will be used in the view of our SDK framework<br /><br /></li></ol><ol start="2"><li><strong>MessageModel</strong> : This one is a model of the message that the client needs to inject<br /><br /></li></ol><ol start="3"><li><strong>MessageCellable</strong> : This protocol represents custom cell if the client wants to use their own UITableViewCell and their own cell identifier. The protocol that wants to conform this one need to be an UITableViewCell and has an UINib from their bundle so our SDK can recognize<br /><br /></li></ol><ol start="4"><li><strong>MessageDatasource</strong> : The datasource needed for our SDK which is the number of messages loaded as well finding the message for the specific index in the table view<br /><br /></li></ol><ol start="5"><li><strong>MessageAdapterDelegate</strong> : Pretty clear this delegate for sending back out the action from our side to the client<br /><br /></li></ol><ol start="6"><li><strong>MessageAdapter</strong> : The main actor, which is the wrapper class for communication from client to us, providing the necessary configuration such as UI and datasource<br /><br /></li></ol><p><em>TIPS : You can also opt-out the UITableViewCell, instead ask client about what kind of UIView they want to inject and we can add it as subview of our own tableviewcell of the message.</em><br /><br /> <em>NOTE : I put public access specifier because I intend to make this as a public framework so client need to be able access it.</em></p><p>Once it is done, then we can go to write our implementation for exposing data to the client. Open your ViewController then look at the code below :</p><pre><code><span class="keyword">public class</span> ViewController: <span class="type">UIViewController</span>, <span class="type">UITableViewDataSource</span>, <span class="type">UITableViewDelegate</span> {
    
    <span class="comment">// If nil then we assume that we use predefined cell type</span>
    <span class="keyword">var</span> cell: <span class="type">MessageCellable</span>?
    
    <span class="comment">// NOTE: You should connect to IBOutlet, this just an example for the sake of the article</span>
    <span class="keyword">var</span> tableView: <span class="type">UITableView</span>!

    <span class="comment">// 1.</span>
    <span class="keyword">var</span> adapter: <span class="type">MessageAdapter</span>!
    <span class="keyword">override func</span> viewDidLoad() {
       <span class="keyword">super</span>.<span class="call">viewDidLoad</span>()
       <span class="comment">// 2.</span>
       tableView.<span class="call">register</span>(cell?.<span class="property">nib</span>, forCellReuseIdentifier: cell?.<span class="property">cellReuseIdentifier</span> ?? <span class="string">""</span>)
       tableView.<span class="property">delegate</span> = <span class="keyword">self</span>
       tableView.<span class="property">dataSource</span> = <span class="keyword">self</span>
       <span class="comment">// 3.</span>
       tableView.<span class="property">backgroundColor</span> = adapter.<span class="property">config</span>.<span class="property">backgroundColor</span>
    }
    
    <span class="keyword">func</span> tableView(<span class="keyword">_</span> tableView: <span class="type">UITableView</span>, numberOfRowsInSection section: <span class="type">Int</span>) -&gt; <span class="type">Int</span> {
      <span class="comment">// 4.</span>
      <span class="keyword">return</span> adapter.<span class="property">datasource</span>.<span class="call">numberOfMessages</span>()
    }
    
    <span class="keyword">func</span> tableView(<span class="keyword">_</span> tableView: <span class="type">UITableView</span>, cellForRowAt indexPath: <span class="type">IndexPath</span>) -&gt; <span class="type">UITableViewCell</span> {
       <span class="keyword">return</span> tableView.<span class="call">dequeueReusableCell</span>(withIdentifier: cell?.<span class="property">cellReuseIdentifier</span> ?? <span class="string">""</span>, for: indexPath)
    }
    
    <span class="keyword">func</span> tableView(<span class="keyword">_</span> tableView: <span class="type">UITableView</span>, didSelectRowAt indexPath: <span class="type">IndexPath</span>) {
       <span class="keyword">let</span> cell = tableView.<span class="call">cellForRow</span>(at: indexPath)
       <span class="comment">// 5.</span>
       <span class="keyword">let</span> messageModel = adapter.<span class="property">datasource</span>.<span class="call">messagesForIndex</span>(indexPath.<span class="property">item</span>)
       adapter.<span class="property">delegate</span>?.<span class="call">messageDidClick</span>(cell!, message: messageModel)
    }
    
    <span class="keyword">func</span> tableView(<span class="keyword">_</span> tableView: <span class="type">UITableView</span>, willDisplay cell: <span class="type">UITableViewCell</span>, forRowAt indexPath: <span class="type">IndexPath</span>) {
       <span class="comment">// 6.</span>
       <span class="keyword">let</span> messageModel = adapter.<span class="property">datasource</span>.<span class="call">messagesForIndex</span>(indexPath.<span class="property">item</span>)
       adapter.<span class="property">delegate</span>?.<span class="call">messageWillDisplay</span>(cell, message: messageModel)
    }
}
</code></pre><ol><li>Reference the adapter into client side. When client wants to reuse the stuff from us, they need to inject the adapter here either through constructor or property injection or method injection<br /><br /></li></ol><ol start="2"><li>Register the custom cell from the client, right now let assume if it exists then we can register it like this base on the protocol we define for them. Later on, we can optimize it by having a default cell view for the message list, if the client decides to not use our built-in cell<br /><br /></li></ol><ol start="3"><li>Example of usage of custom UI configuration from the adapter. We can optimize by having a default value<br /><br /></li></ol><ol start="4"><li>Number of datasource here which is the message is coming from the client datasource<br /><br /></li></ol><ol start="5"><li>Pretty clear this one example we send back the signal to the client regarding the action from us<br /><br /></li></ol><ol start="6"><li>Example of sending back the message model per index from the rendered list in our table view<br /><br /></li></ol><p><em>TIPS : You can always optimize the optional one with the default value.</em><br /><br /></p><p>Now let see how it works from the client POV. As a client what we need to do is create our MessageModel (In case we don‚Äôt want to reuse our SDK logic) as well the Adapter and inject it when we want to instantiate and push the VC from our UIKit.</p><pre><code><span class="keyword">import</span> CustomUIKit <span class="comment">// Name this base on your own framework
// 1. Make the adapter, message model, and so on. Assuming you already have your own class that conform to MessageDatasource and has MessageModel inside, so that should be fine</span>

<span class="keyword">let</span> config = <span class="type">MessageUIConfig</span>(backgroundColor: .<span class="dotAccess">red</span>, textColor: .<span class="dotAccess">blue</span>)
<span class="keyword">let</span> datasource = <span class="type">OwnMessageDatasource</span>() <span class="comment">// Must conform to MessageDatasource</span>
<span class="keyword">let</span> adapter = <span class="type">MessageAdapter</span>(config: config, datasource: datasource)

<span class="comment">// 2. Call the SDK VC, inject the adapter and push it to current nav controller</span>
<span class="keyword">let</span> vc = <span class="type">ViewController</span>.<span class="call">makeInstance</span>(adapter: customAdapter)
<span class="comment">// vc.adapter = adapter</span>
navigationController?.<span class="call">pushViewController</span>(vc, animated: <span class="keyword">true</span>)

</code></pre><ol><li>Create your own adapter and inject the custom config and datasource<br /><br /></li></ol><ol start="2"><li>Call the UIKit SDK public ViewController and call the static function of makeInstance that inject the adapter and return the ViewController. Another approach is putting property injection like the code below. All depend on your own approach to tackle client issues<br /><br /></li></ol><p>Viola! Done. Assuming you already set up all necessarily required protocol and inject it correctly then you will be fine. You can also optimize and customize the class from your own side before deploying it to the client. I would suggest to always limit what the client can customize, without also making them do the hard work.</p><h3>Reference<br /></h3><ol><li>Refactoring Guru (High recommended book to buy)</li><li><a href=" https://stackoverflow.com/questions/350404/how-do-the-proxy-decorator-adapter-and-bridge-patterns-differ/7211706">Stack overflow</a></li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://michaelabadi.com/articles/Build-Static-Website-Swift-John-Sundell-publish</guid><title>Get started with John Sundell's Publish (From Leonte.dev)</title><description>How to get started building a static website using Swift's Publish library by John Sundell.</description><link>https://michaelabadi.com/articles/Build-Static-Website-Swift-John-Sundell-publish</link><pubDate>Thu, 16 Jan 2020 15:14:00 +0700</pubDate><content:encoded><![CDATA[<h1>Get started with John Sundell's Publish (From Leonte.dev)</h1><h3>Original article : <a href="https://www.leonte.dev/articles/build-static-website-swift-john-sundell-publish/">build-static-website-swift-john-sundell-publish</a></h3><h2>Install Publish</h2><p>Run in Terminal</p><pre><code>$ git clone https://github.<span class="property">com</span>/<span class="type">JohnSundell</span>/<span class="type">Publish</span>.<span class="property">git</span>
$ cd <span class="type">Publish</span>
$ make
$ mkdir <span class="type">Leonte</span>.<span class="property">dev</span>
$ cd <span class="type">Leonte</span>.<span class="property">dev</span>
$ publish new
$ <span class="keyword">open</span> <span class="type">Package</span>.<span class="property">swift</span>
</code></pre><p>Run (CMD+R) the project. It will create an Output folder</p><h2>Run a local HTTP server</h2><pre><code>$ cd <span class="type">Output</span>
$ python -m <span class="type">SimpleHTTPServer</span> <span class="number">8080</span>
</code></pre><p>Now open http://localhost:8080/ in a browser to see your 'Hello World!' website.</p><h2>Start customizing your website</h2><p>In Xcode, open Sources &gt; Leontedev &gt; main.swift</p><p>Modify the struct's properties to customize your website.</p><pre><code><span class="keyword">struct</span> Leontedev: <span class="type">Website</span> {
</code></pre><p>You'll also want to create your own theme. I made a copy of the theme that comes built-in and worked on that one.</p><p>You can get inspiration from my own implementation: <a href="https://github.com/leontedev/Publish-leonte.dev">https://github.com/leontedev/Publish-leonte.dev</a></p>]]></content:encoded></item></channel></rss>