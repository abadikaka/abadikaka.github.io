<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Michael Abadi&#39;s Blog</title>
    <link>/</link>
    <description>Recent content on Michael Abadi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leverage Accessibility Identifier For View Debugging</title>
      <link>/articles/debugging-with-accessibility-swiftui/</link>
      <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/articles/debugging-with-accessibility-swiftui/</guid>
      <description>Recently I have been fascinated with the fact many people, especially indie dev have started to think about accessibility for their application. However, there are still fewer resources on how do we kick off our journey in Accessibility with a more real-world use case that we can adapt. In this article, I would like to explain how do we utilize and incorporate the most basic Accessibility topics into our codebase, which is accessibilityId.</description>
    </item>
    
    <item>
      <title>Create Draggable Calendar View in SwiftUI</title>
      <link>/articles/create-calendar-view-swiftui/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/articles/create-calendar-view-swiftui/</guid>
      <description>While I was looking at my twitter for inspiration, a tweet from Sean Allen caught my eyes. He made an amazing calendar component with a drag and drop capabilities of its item. I look up the possibilities of using the native SwiftUI approach without any UIKit hack or workaround to do so. In this article, I will explain step by step as well a brief explanation of the API I used to make the calendar view in SwiftUI.</description>
    </item>
    
    <item>
      <title>VIPER adoption to SwiftUI</title>
      <link>/articles/swiftui-viper-adaption/</link>
      <pubDate>Sun, 29 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/articles/swiftui-viper-adaption/</guid>
      <description>VIPER is one of the hottest architectures back then because of its separation of layers that isolated between each other which is also debatable. Some argue that VIPER is over-engineer and an overkill architecture, some argue that VIPER causes too many boilerplates of code and some argue that VIPER is one of the best architecture for iOS Development. All of these opinions are valid, we definitely can use VIPER depends on how complex is our project and other undefined constraints.</description>
    </item>
    
    <item>
      <title>Command Pattern in real-life</title>
      <link>/articles/command-pattern-swift/</link>
      <pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/articles/command-pattern-swift/</guid>
      <description>Recently I have a problem in my team whereas the analytics function become scattered. Some other team create their own function and handling their own caching for tracking the events, and some even create multiple similar function across the modules only for analytics, until then a problem arises.
Since my company heavily depends on A/B Testing and data-driven culture, at some point we have found a lot of biased data as well missing parameters, then I start to investigate the issues.</description>
    </item>
    
    <item>
      <title>Discover Swift Package Manager</title>
      <link>/talks/swifty-id/</link>
      <pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/talks/swifty-id/</guid>
      <description>Swift ID Dev is an Indonesian study group community that is being organized by Nico. In this session, I mentored iOS developers about how to create a simple package manager for personal project as well basic foundation of a modularization.
  Slides: https://github.com/abadikaka/conference-and-talks/blob/main/SPM.key
 AppCoda - Mastering SwiftUI - One of the best book out there for accelerating your understanding of SwiftUI. Use discount code &#34;launch2021&#34; while you are purchasing this book throughout this link.</description>
    </item>
    
    <item>
      <title>Analyze HTTP Traffic with new HTTP Instrument</title>
      <link>/articles/analyse-http-instruments/</link>
      <pubDate>Sat, 19 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/articles/analyse-http-instruments/</guid>
      <description>WWDC21 has been finished last week with over 200 sessions. Most of the time we heard about SwiftUI session or about Async Await. However there are also interesting session about debugging that has been described by Keith Harrison here. In this article I would like to focus on one of the underrated session which is Analyze HTTP Traffic in Instruments. I also write this article in WWDC Notes.
 All content copyright © 2012 – 2021 Apple Inc.</description>
    </item>
    
    <item>
      <title>Mentorship in WWDC Community 2021</title>
      <link>/talks/wwdc-community/</link>
      <pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/talks/wwdc-community/</guid>
      <description>WWDC Mentorship Week, organized by WWDC Community 2021. During this WWDC 2021 week, I volunteered to help the community by giving a free mentorship and share my experience about working as an iOS Engineer to those who booked my sessions. I have succesfully mentored 12 student from Indonesia and 1 student from Malaysia.
 AppCoda - Mastering SwiftUI - One of the best book out there for accelerating your understanding of SwiftUI.</description>
    </item>
    
    <item>
      <title>Complete List of Must-Watch Conferences Before WWDC 2021</title>
      <link>/articles/complete-conference-list-to-watch/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/articles/complete-conference-list-to-watch/</guid>
      <description>Tik tok tik tok, 6 more days before we are going to watch the WWDC 2021 Conference. Multiple events are being hosted by many iOS Developers around the world. Besides that, I would like also to recommend some top watchlists of the iOS Conference, that we can watch as a warm-up before we are sitting and watching WWDC next week.
Here are my top lists:
Swift Heroes Italy    Swift Heroes Italy is one of the most underrated conferences in Italy.</description>
    </item>
    
    <item>
      <title>Smart Trip</title>
      <link>/projects/smarttrip/</link>
      <pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/projects/smarttrip/</guid>
      <description>Explore tourism nearby, buy e-ticket and enjoy your trip. This project as part of DevPost hackathon about APEC 2021 App Challenge
Tech Stack  Combine Core Data Firebase SwiftUI  Demo     AppCoda - Mastering SwiftUI - One of the best book out there for accelerating your understanding of SwiftUI. Use discount code &#34;launch2021&#34; while you are purchasing this book throughout this link.
 Support MY BLOG by checking out this sponsor.</description>
    </item>
    
    <item>
      <title>Testing In-App Purchases Locally in Simulator</title>
      <link>/articles/storekit-testing/</link>
      <pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/articles/storekit-testing/</guid>
      <description>During development, we will come into a phase where we would like to test out our In-App Purchases. However, most likely we ever heard a myth that IAP only works with devices to test it out with an internal tester account. Turns out during the process of the creation of Tripzy, I found a way to test our IAP in a simulator without any hassle. Keep in mind there will be some limitations of course if we are testing against the simulator.</description>
    </item>
    
    <item>
      <title>Tripzy</title>
      <link>/projects/tripzy/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/projects/tripzy/</guid>
      <description>Personalised your travel budgets, easily directly from pocket without any hassle.
Tech Stack  Combine Core Data SwiftUI  Download App Store    Tripzy - Track Your Trip Expenses - Enjoy one of compact travel&#39;s budget trackers, directly through your pocket. No hassle, to the point, and without no login required along with the intuitive dashboard Tripzy gives you access to create your travel expenses and track them easily from your device without any hassle.</description>
    </item>
    
    <item>
      <title>Simple Slick SwiftUI Onboarding View</title>
      <link>/articles/simple-slick-onboarding/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/articles/simple-slick-onboarding/</guid>
      <description>Apparently, even if SwiftUI 2.0 has powerful enough for production code, but sometimes they are still lacking documentation for a simple component like PagingView. As your information, there is now a native equivalent of UIPageViewController in SwiftUI 2.0 which is adding the .tabViewStyle modifier to TabView and pass PageTabViewStyle
Let me go through step by step.
  We will need to wrap our view with the GeometryReader in order to get the parent relative size position for configuring the onboarding view frame.</description>
    </item>
    
    <item>
      <title>Englizh</title>
      <link>/projects/englizh/</link>
      <pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/projects/englizh/</guid>
      <description>Test your IELTS or English skills in general with this application.
Tech Stack  Combine Core Data SwiftUI  Download Coming Soon
    Tripzy - Track Your Trip Expenses - Enjoy one of compact travel&#39;s budget trackers, directly through your pocket. No hassle, to the point, and without no login required along with the intuitive dashboard Tripzy gives you access to create your travel expenses and track them easily from your device without any hassle.</description>
    </item>
    
    <item>
      <title>Enhance Factory Pattern capabilities for DI in Swift within 3 minutes</title>
      <link>/articles/enhance-factory-pattern/</link>
      <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/articles/enhance-factory-pattern/</guid>
      <description>Factory pattern is one of the common patterns in a programming language. It is one of the creational design patterns that provide a high level of flexibility for your code. One of the interesting use cases that could make Factory pattern become a handy tool to use is Dependency Injection. Normally whenever we want to inject an interface as a dependency on an object, we could easily pass it through the initializer or set it from the property.</description>
    </item>
    
    <item>
      <title>Understanding Proxy Pattern in Swift within 5 minutes</title>
      <link>/articles/proxy-pattern-swift/</link>
      <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/articles/proxy-pattern-swift/</guid>
      <description>The proxy pattern is one of the few underrated patterns that nobody really talks about in iOS. A proxy pattern is one of the structural design patterns that lets you provide a substitute or placeholder for another object. A proxy has total control and access to the original object, and let the proxy object do some magical stuff with the original object and restrict the access to it, however, the one who uses a proxy object, won’t have any knowledge behind the scene.</description>
    </item>
    
    <item>
      <title>Utilize Combine for Search Engine in Swift</title>
      <link>/articles/utilize-combine/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/articles/utilize-combine/</guid>
      <description>Combine, is a new framework introduced by Apple since SwiftUI 1.0 back then in 2019. The architecture behind the scene itself is adopting the system of FRP (Functional Reactive Programming) which takes computation as their main computation of process combine with the propagation of data through the stream of the function. In this tutorial, I would like to explain how Combine can make your job done quicker than ever compare with the conventional way of code.</description>
    </item>
    
    <item>
      <title>Stockpedia</title>
      <link>/projects/stockpedia/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/projects/stockpedia/</guid>
      <description>See latest stock news and current company stock detail around the world.
Tech Stack  Combine Finnhub API SwiftUI  Download App Store
  AppCoda - Beginner Book iOS15 - Want to start as iOS Programmer but dunno where to start? Beginner book from AppCoda is the one to go. Start your journey with this book without any hesitation. Use discount code &#34;launch2021&#34; while you are purchasing this book throughout this link.</description>
    </item>
    
    <item>
      <title>Fun Debugging in iOS — Understanding the GUI in 3 minutes</title>
      <link>/articles/fun-debugging-5-minutes/</link>
      <pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/articles/fun-debugging-5-minutes/</guid>
      <description>After we have understood the basic concept of LLDB commands now it is taking time to understand the full GUI of Xcode debugging.
Let see the picture above. Once you have put a breakpoint on any lines of code in your applications, you will see a similar screen as above.
  The top one is our code panel, which indicates where is our breakpoint located
  The bottom left panel is our quick look panel, we can see our current state of the object in either class or function level at the moment the code is being halted</description>
    </item>
    
    <item>
      <title>Fun Debugging iOS — Basic Part (LLDB) in 3 minutes</title>
      <link>/articles/lldb-basic-concept/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/articles/lldb-basic-concept/</guid>
      <description>Have you ever wonder how to debug your entire code in the proper way? But sometimes we don’t know in-depth detail about how does it work behind the scene? In this multiple series of articles, I am trying to spread multiple articles into specific chunks of debugging part, start with the basic / foundation part of debugging in iOS. Normally we will have multiple topics covering all areas, start with LLDB debugging and end with Logging.</description>
    </item>
    
    <item>
      <title>2020, Year of Self-Growth, 2021, Year of Productivity</title>
      <link>/articles/2020-year-of-productivity/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/articles/2020-year-of-productivity/</guid>
      <description>2020 has been passed, it’s been a thrilling ride for this year especially for uncertainties about COVID that limit us to move around especially traveling. Some people like me, who work abroad, far from family, may have some difficulties. However, it doesn’t need to be that desperate. Instead, there were so many good things that happened during this past 1 year. My productivity increase twice even more than before. There were multiple accomplishments that I took as proof that this year, as much as it sounds a hurtful year, we can always find and seek the opportunity to turn the table around.</description>
    </item>
    
    <item>
      <title>Introducing SFSymbolsFinder</title>
      <link>/articles/introducing-sf-symbols-finder/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/articles/introducing-sf-symbols-finder/</guid>
      <description>Recently I got stumbled with a boring way to create an icon from SF Symbols. As you know that Apple introduces SF Symbols for a developer to reuse in their own application if needed. SF Symbols is a set of over 1,500 symbols that you can use in your app. Why SFSymbols are great for indie developers?
 It is free Optical alignment with text for all weights and sizes Support multicolor Support localization for RTL languages such as Arabic, Devanagari, and Hebrew  Normally we will do something like this for using the SFSymbols</description>
    </item>
    
    <item>
      <title>Xcode handy “Move and Share” breakpoint in 2 minutes</title>
      <link>/articles/handy-breakpoint/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/articles/handy-breakpoint/</guid>
      <description>Do you know that we can actually simply share our breakpoints with our colleagues at work? Xcode provides us with the capability to share it. This share function is very handy if we want all colleagues to have a similar breakpoint. Some breakpoints that worth sharing are Exception breakpoint, Runtime breakpoint, and some Symbolic breakpoints. Let see how it works
  Go to your debug navigator panel on the left panel</description>
    </item>
    
    <item>
      <title>iOS Dev Thailand Conference 2020</title>
      <link>/talks/thai-conf-2020/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/talks/thai-conf-2020/</guid>
      <description>Session 1 : Unboxing the debugger: Broke the myth of debugging in iOS in an easy way by Michael Abadi, Agoda. In this conference, I was presenting a session about debugging in iOS followed by a presentation from Federico Zanetello about Swift Package Manager
  AppCoda - Beginner Book iOS15 - Want to start as iOS Programmer but dunno where to start? Beginner book from AppCoda is the one to go.</description>
    </item>
    
    <item>
      <title>iOS Indonesia Conference 2020</title>
      <link>/talks/indo-talks/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/talks/indo-talks/</guid>
      <description>In this conference, I was presenting a session about debugging in iOS followed by a presentation from Edward Anthony about Network Abstraction Layer and Bondan Eko Prasetyo about Modularization at Scale.
 AppCoda - Beginner Book iOS15 - Want to start as iOS Programmer but dunno where to start? Beginner book from AppCoda is the one to go. Start your journey with this book without any hesitation. Use discount code &#34;</description>
    </item>
    
    <item>
      <title>Symbolic Breakpoint Xcode in 2 Minutes</title>
      <link>/articles/symbolic-breakpoint/</link>
      <pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/articles/symbolic-breakpoint/</guid>
      <description>Once upon a time, while I was debugging my code, I found out an annoying warning comes up like below
[TableView] Warning once only: UITableView was told to layout its visible cells and other contents without being in the view hierarchy (the table view or one of its superviews has not been added to a window). This may cause bugs by forcing views inside the table view to load and perform layout without accurate information (e.</description>
    </item>
    
    <item>
      <title>Fun usage of Generic implementation in Swift</title>
      <link>/articles/fun-usage-generic/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/articles/fun-usage-generic/</guid>
      <description>Most of us know that generic in programming means we able to do something not limited to one specific type but has more wide selection on the same basis. The most common examples are Queue or Stack use cases. Let say we would like to implement an implementation of both problems not limited to one type of data type, we would like to use a Generic way to solve this problem like the code below</description>
    </item>
    
    <item>
      <title>Escalated Testing Pyramid</title>
      <link>/articles/escalated-testing-pyramid/</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/articles/escalated-testing-pyramid/</guid>
      <description>As a normal software engineer, we always remember the rule of thumb of testing. We always heard the word of the testing pyramid which consists of 3 things :
 Unit Testing Integration Testing UI Testing  Unit Testing is the foundation of your test suite that will be made up of unit tests. Your unit tests make sure that a certain unit (your subject under test or SUT) of your codebase works as intended.</description>
    </item>
    
    <item>
      <title>Agoda (Full-Time Work @Agoda)</title>
      <link>/projects/agoda/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/projects/agoda/</guid>
      <description>Agoda is one of biggest company in hospitality industry. One of the leading OTA platform in Asia as part of Booking Holding Group. I have been working full time in Agoda since 2020 and take part for enhancing and help to make Agoda iOS App as the best iOS App in the industry.
Tech Stack  UIKit Core Data DSL Language Swift Objective-C VIPER  Download App Store
  AppCoda - Mastering SwiftUI - One of the best book out there for accelerating your understanding of SwiftUI.</description>
    </item>
    
    <item>
      <title>MapView Annotation in SwiftUI</title>
      <link>/articles/mapview-annotation/</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/articles/mapview-annotation/</guid>
      <description>SwiftUI is very powerful for building an interactive UI at a fast pace. However, there are a couple of limitations still there such as some native API from UIKit like MKMapView from MapKit or search bar and other UIKit API. I will provide a tutorial for making a MapView in SwiftUI by using UIViewRepresentable as well as putting callback to the SwiftUI if we have clicked the annotation.
Some quick knowledge about several items below:</description>
    </item>
    
    <item>
      <title>Wrapper Pattern Swift in 5 minutes</title>
      <link>/articles/wrapper-pattern-swift/</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/articles/wrapper-pattern-swift/</guid>
      <description>Have you ever heard about the problem that you need to separate two modules working independently without knowing each other implementation, but requires to be able to communicate easily by only sending necessary data? Most of the advanced use cases will face this real-world use case and we require a more advanced design pattern to be able to solve this pattern to give more scalability to the project. There is a general concept about “Wrapping” an object through an intermediary class that can adapt to each other.</description>
    </item>
    
    <item>
      <title>Distributing private project with Cocoapod and Carthage in 5 minutes</title>
      <link>/articles/distributing-private-cocoapod/</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/articles/distributing-private-cocoapod/</guid>
      <description>Last week I have a problem while making a pod for my SDK team. I ever made my own pod long time ago and it was very easy in the process. But this one was a different story. I need to make support of Cocoapod and Carthage and SPM for the project that is built within private repo but we want to distribute it globally. So what is the option? Pod and Carthage and SPM offer capabilities to share the project repo to being used widely by many people and they can easily integrate or even contribute to it.</description>
    </item>
    
    <item>
      <title>Tripzy (Draft)</title>
      <link>/projects/tripzy-draft/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/projects/tripzy-draft/</guid>
      <description>Personalised your travel itinerary, search another inspiration from people around the world, and easily import or bookmark trips.
Tech Stack  Combine Core Data SwiftUI  Demo Coming Soon  AppCoda - Mastering SwiftUI - One of the best book out there for accelerating your understanding of SwiftUI. Use discount code &#34;launch2021&#34; while you are purchasing this book throughout this link.
 Support MY BLOG by checking out this sponsor. Find more details here.</description>
    </item>
    
    <item>
      <title>Trigger iOS Unit Test Check-In Github with Jenkins (Automation)</title>
      <link>/articles/trigger-ios-jenkin-automation/</link>
      <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/articles/trigger-ios-jenkin-automation/</guid>
      <description>Wonder how to make automation for triggering the build and unit test in git with Jenkins? So this one could be the easiest tutorial you can follow. First let open our Jenkins web page, login, and create a new Free project. Once you create it, go to configure tab and you will go to this page below
Fill up the textbox above on the description and tick the GitHub project row and fill in the project URL.</description>
    </item>
    
    <item>
      <title>Simple Protocol Oriented in SwiftUI in 5 minutes</title>
      <link>/articles/simple-protocol-swiftui/</link>
      <pubDate>Fri, 24 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/articles/simple-protocol-swiftui/</guid>
      <description>SwiftUI is a really powerful language since it was born in 2019. In 2020 (WWDC) Apple did announce a lot of improvement on SwiftUI. However, there is rarely a topic discussed good practices on how to do we able to implement protocol-oriented programming in SwiftUI. There are a lot of articles out there however I guarantee to cover that in 5 minutes of your time. This article is suitable for those who are just starting to learn about iOS Programming !</description>
    </item>
    
    <item>
      <title>Understanding WidgetKit in 5 minutes</title>
      <link>/articles/understanding-widget-kit/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/articles/understanding-widget-kit/</guid>
      <description>One of the most interesting topics in WWDC 2020 was about WidgetKit. Yeah, this small icon on the home screen of our phone will represent some of the contents within the app itself!. Recently, I try to implement WidgetKit into my own project. Let’s talk about some key points of WidgetKit itself before we go ahead. There are 4 key points what makes your WidgetKit great :
  Glanceable: a great widget displays the right amount of content</description>
    </item>
    
    <item>
      <title>All of Apple WWDC2020 Keynote!</title>
      <link>/articles/apple-wwdc-keynote/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/articles/apple-wwdc-keynote/</guid>
      <description>Here is the list of features that Apple introduced on their WWDC 2020 Event keynote:
iOS 14  App Library: A new space for organizing all of your apps into a grouped library and easy to navigate Widgets: Freely search widget and choose widget and put it in the Smart Stack into the home screen. The smart stack can do it for us automatically, you can see the news in the morning, meeting on noon and activities on the evening Picture in picture: You can open a video, audio, or other media while you are on another application.</description>
    </item>
    
    <item>
      <title>Reason to choose Static and Dynamic frameworks in &lt; 5 minutes</title>
      <link>/articles/reason-to-choose-static-dynamic/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/articles/reason-to-choose-static-dynamic/</guid>
      <description>One day after we have successfully grown our app bigger, we face multiple problems. One problem we found out that our code is super messy and confusing!. Another, why the hell it took a very long time for compiling!. So what is the solution that comes up to our mind? As a beginner, we will think that Class separation would be enough for solving the messy code since we know that it is easier to build, less time consuming, and easier to code.</description>
    </item>
    
    <item>
      <title>Fun Scripting in Swift — for beginner (PART II)</title>
      <link>/articles/fun-scripting-part-2/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/articles/fun-scripting-part-2/</guid>
      <description>Now time for the next step after the previous part of my articles. After we know some basic knowledge of swift scripting lets moves to the next one! Now we will talk about ArgumentParser. It is a new library that provides multiple commands and parses the arguments in the command line. Let us first set up the dependencies and the product name on our Package.swift and run swift build to make sure we fetch the latest dependencies in the project.</description>
    </item>
    
    <item>
      <title>Fun Scripting in Swift — for beginner (PART I)</title>
      <link>/articles/fun-scripting-part-1/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/articles/fun-scripting-part-1/</guid>
      <description>Have you ever used fastlane? swiftlint? xcodegen?. Yeah as an iOS developer we must be familiar with all of those tools for doing automation stuff. How about we need something that no one provides for us? Well, we can make one of those scripts by using Swift!. First of all, if you haven’t watched a wonderful UIKonf conference featuring Federico Zanetello, you need to put it on your watchlist !. In this article, I would like to explain how does swift scripting is working also by demonstrating the usage of it.</description>
    </item>
    
    <item>
      <title>Bake a Builder Pattern in iOS</title>
      <link>/articles/bake-builder-pattern/</link>
      <pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/articles/bake-builder-pattern/</guid>
      <description>Have you ever have a problem when designing a system that has a similar foundation and capabilities however the ingredients to form the object would vary? We may end up with an easy solution by providing different parameters for each subclass. However, multiple subclasses that need to override the constructor might also have to own those unnecessary properties into its interface. There is one design pattern that also considered as Creational Design Pattern which Android Design pattern by default having this pattern.</description>
    </item>
    
    <item>
      <title>Easy way to do Share Extension in iOS</title>
      <link>/articles/share-extension/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/articles/share-extension/</guid>
      <description>Wonder how to make your application can share any picture or file or text even URL into our own application? Well everyone knows we can use App Extension and create our extension for doing it. But imagine if we have multiple clients and need to use a specific token for each client, or we do have many configurations for the UI that can be displayed differently according to the clients, how we can achieve that?</description>
    </item>
    
    <item>
      <title>Eko Communication (Full-Time Work @Amity)</title>
      <link>/projects/amity/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/projects/amity/</guid>
      <description>Eko is the virtual workspace helping teams stay engaged, productive and connected while working remotely. Our features enable you and your team to :
 Maintain a sense of community: Our knowledge-sharing features, discussion hubs, and group chats enable teams to gather dynamically, maintaining the social elements and ‘water cooler chats’ of work even while dispersed. Stay connected: Replace meetings, daily briefings and All-Hands meetings with virtual conference calls or instant, company-wide announcement broadcasts.</description>
    </item>
    
    <item>
      <title>Okkami (Full Time @OKKAMI)</title>
      <link>/projects/okkami/</link>
      <pubDate>Sat, 05 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/projects/okkami/</guid>
      <description>Bring hospitality to the next level. OKKAMI lets you get better service during all parts of your travel journey. Personally connect with hotels before, during and after you make travel plans. While staying with our partner hotels you can pair your mobile phone to access hotel promotions, mobile channel guide, hotel information, local chat and much more.
Tech Stack  React Native Objective-C Swift Raspberry Pi Pusher Realm Deep Linking  Download App Store</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>/about/michael-abadi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/michael-abadi/</guid>
      <description>Hi, I&amp;rsquo;m Michael — a sophisticated Software Engineer.  Michael Abadi Santoso is an iOS Engineer, originally from Indonesia and currently living and working in Thailand at Agoda.
The purpose of creating this blog is because I want to give back to the community as I have been taught by other great iOS Developer, and I would like to continue the chains. Besides, one of great way to learn something is by teaching it.</description>
    </item>
    
    <item>
      <title>Sponsor</title>
      <link>/sponsor/sponsor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sponsor/sponsor/</guid>
      <description>How to Support My Blog! Since mid 2020, I try to publish at least one blog every month throughout my Medium channel. After that, I started to develop this website and start to gradually put my technical content to my own website without any hassle. At the moment, my blog is still growing with over 2000 visitors and I would like to keep this momentum.
I have decided to open up a sponsorship program in case you want to support my work.</description>
    </item>
    
    <item>
      <title>Subscribe</title>
      <link>/subscribe/subscribtion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/subscribe/subscribtion/</guid>
      <description>Thank you for reading my blog! Sign up for my email newsletter or use this RSS feed to get notified of new blog posts.
Checkout these books below (PROMO CODE attached)!  AppCoda - Mastering SwiftUI - One of the best book out there for accelerating your understanding of SwiftUI. Use discount code &#34;launch2021&#34; while you are purchasing this book throughout this link.
 Support MY BLOG by checking out this sponsor.</description>
    </item>
    
  </channel>
</rss>
